/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 .\src\assets\sofa.glb 
*/

import React, { useMemo } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import sofa from "./assets/sofa.glb";

export function Sofa({ color = "original", ...props }) {
  const { nodes, materials } = useGLTF(sofa);

  // Only modify material if color is not "original"
  const modifiedMaterial = useMemo(() => {
    if (color === "original") {
      return nodes.geometry_0.material;
    }

    const originalMaterial = nodes.geometry_0.material;
    const newMaterial = originalMaterial.clone();

    Object.assign(newMaterial, {
      ...originalMaterial,
      color: new THREE.Color(color),
      blending: THREE.MultiplyBlending,
    });

    return newMaterial;
  }, [nodes.geometry_0.material, color]);

  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.geometry_0.geometry}
        material={modifiedMaterial}
        rotation={[0, 0, 0]}
      />
    </group>
  );
}

useGLTF.preload(sofa);
